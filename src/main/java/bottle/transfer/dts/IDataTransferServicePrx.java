// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `DataTransferService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bottle.transfer.dts;

/**
 * 思路:
 * 1 客户端 请求服务器  -  保存的文件路径, 保存的文件名 ,文件大小
 * 2 服务端 开辟文件空间 如果不够 则返回失败
 * 使用 RandomAccessFile ,并保存对象
 * 绑定唯一标识 TAG - RandomAccessFile对象- 存入Map等数据结构
 * 返回一个 包含唯一标识 TAG的分片对象(list) - 对象包含: 文件数据片段起点,大小,数据片段Tag,数据Byte(空)
 * 3 客户端获取 分片对象List ,单线程上传 - 循环list 填充数据,使用RandomAccessFile  (多线程上传- 线程池+片段数据上传即可)
 * 4 客户端调用文件传送成功结构- 服务端关闭Raf (服务端存在间隔监听线程,定时检测关闭Raf,避免资源占用未释放)
 **/
public interface IDataTransferServicePrx extends Ice.ObjectPrx
{
    /**
     * 请求上传文件
     **/
    public FileUploadRespond request(FileUploadRequest request);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     **/
    public FileUploadRespond request(FileUploadRequest request, java.util.Map<String, String> __ctx);

    /**
     * 请求上传文件
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, java.util.Map<String, String> __ctx);

    /**
     * 请求上传文件
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, Ice.Callback __cb);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 请求上传文件
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, Callback_IDataTransferService_request __cb);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, java.util.Map<String, String> __ctx, Callback_IDataTransferService_request __cb);

    /**
     * 请求上传文件
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, 
                                         IceInternal.Functional_GenericCallback1<FileUploadRespond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 请求上传文件
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, 
                                         IceInternal.Functional_GenericCallback1<FileUploadRespond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<FileUploadRespond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 请求上传文件
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_request(FileUploadRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<FileUploadRespond> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 请求上传文件
     * @param __result The asynchronous result object.
     **/
    public FileUploadRespond end_request(Ice.AsyncResult __result);

    /**
     * 上传已经填充的文件数据片段
     **/
    public void transfer(String tag, TransferSequence ts, byte[] data);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     **/
    public void transfer(String tag, TransferSequence ts, byte[] data, java.util.Map<String, String> __ctx);

    /**
     * 上传已经填充的文件数据片段
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data, java.util.Map<String, String> __ctx);

    /**
     * 上传已经填充的文件数据片段
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data, Ice.Callback __cb);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 上传已经填充的文件数据片段
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data, Callback_IDataTransferService_transfer __cb);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, TransferSequence ts, byte[] data, java.util.Map<String, String> __ctx, Callback_IDataTransferService_transfer __cb);

    /**
     * 上传已经填充的文件数据片段
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, 
                                          TransferSequence ts, 
                                          byte[] data, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 上传已经填充的文件数据片段
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, 
                                          TransferSequence ts, 
                                          byte[] data, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, 
                                          TransferSequence ts, 
                                          byte[] data, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 上传已经填充的文件数据片段
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_transfer(String tag, 
                                          TransferSequence ts, 
                                          byte[] data, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 上传已经填充的文件数据片段
     * @param __result The asynchronous result object.
     **/
    public void end_transfer(Ice.AsyncResult __result);

    /**
     * 上传完成
     **/
    public void complete(String tag);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     **/
    public void complete(String tag, java.util.Map<String, String> __ctx);

    /**
     * 上传完成
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, java.util.Map<String, String> __ctx);

    /**
     * 上传完成
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, Ice.Callback __cb);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 上传完成
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, Callback_IDataTransferService_complete __cb);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, java.util.Map<String, String> __ctx, Callback_IDataTransferService_complete __cb);

    /**
     * 上传完成
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 上传完成
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 上传完成
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_complete(String tag, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 上传完成
     * @param __result The asynchronous result object.
     **/
    public void end_complete(Ice.AsyncResult __result);
}
