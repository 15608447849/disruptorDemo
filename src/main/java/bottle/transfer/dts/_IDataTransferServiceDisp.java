// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `DataTransferService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bottle.transfer.dts;

/**
 * 思路:
 * 1 客户端 请求服务器  -  保存的文件路径, 保存的文件名 ,文件大小
 * 2 服务端 开辟文件空间 如果不够 则返回失败
 * 使用 RandomAccessFile ,并保存对象
 * 绑定唯一标识 TAG - RandomAccessFile对象- 存入Map等数据结构
 * 返回一个 包含唯一标识 TAG的分片对象(list) - 对象包含: 文件数据片段起点,大小,数据片段Tag,数据Byte(空)
 * 3 客户端获取 分片对象List ,单线程上传 - 循环list 填充数据,使用RandomAccessFile  (多线程上传- 线程池+片段数据上传即可)
 * 4 客户端调用文件传送成功结构- 服务端关闭Raf (服务端存在间隔监听线程,定时检测关闭Raf,避免资源占用未释放)
 **/
public abstract class _IDataTransferServiceDisp extends Ice.ObjectImpl implements IDataTransferService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::dts::IDataTransferService"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 上传完成
     **/
    public final void complete(String tag)
    {
        complete(tag, null);
    }

    /**
     * 请求上传文件
     **/
    public final FileUploadRespond request(FileUploadRequest request)
    {
        return request(request, null);
    }

    /**
     * 上传已经填充的文件数据片段
     **/
    public final void transfer(String tag, TransferSequence ts, byte[] data)
    {
        transfer(tag, ts, data, null);
    }

    public static Ice.DispatchStatus ___request(IDataTransferService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        FileUploadRequest request = null;
        request = FileUploadRequest.__read(__is, request);
        __inS.endReadParams();
        FileUploadRespond __ret = __obj.request(request, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        FileUploadRespond.__write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___transfer(IDataTransferService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String tag;
        TransferSequence ts = null;
        byte[] data;
        tag = __is.readString();
        ts = TransferSequence.__read(__is, ts);
        data = DataBytesHelper.read(__is);
        __inS.endReadParams();
        __obj.transfer(tag, ts, data, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___complete(IDataTransferService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String tag;
        tag = __is.readString();
        __inS.endReadParams();
        __obj.complete(tag, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "complete",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "request",
        "transfer"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___complete(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___request(this, in, __current);
            }
            case 6:
            {
                return ___transfer(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
