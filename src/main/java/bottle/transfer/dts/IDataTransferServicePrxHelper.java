// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `DataTransferService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package bottle.transfer.dts;

/**
 * Provides type-specific helper functions.
 **/
public final class IDataTransferServicePrxHelper extends Ice.ObjectPrxHelperBase implements IDataTransferServicePrx
{
    private static final String __requestFileUpload_name = "requestFileUpload";

    public TransferSequence[] requestFileUpload(FileUploadRequest request)
    {
        return requestFileUpload(request, null, false);
    }

    public TransferSequence[] requestFileUpload(FileUploadRequest request, java.util.Map<String, String> __ctx)
    {
        return requestFileUpload(request, __ctx, true);
    }

    private TransferSequence[] requestFileUpload(FileUploadRequest request, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__requestFileUpload_name);
        return end_requestFileUpload(begin_requestFileUpload(request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request)
    {
        return begin_requestFileUpload(request, null, false, false, null);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, java.util.Map<String, String> __ctx)
    {
        return begin_requestFileUpload(request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, Ice.Callback __cb)
    {
        return begin_requestFileUpload(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_requestFileUpload(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, Callback_IDataTransferService_requestFileUpload __cb)
    {
        return begin_requestFileUpload(request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, java.util.Map<String, String> __ctx, Callback_IDataTransferService_requestFileUpload __cb)
    {
        return begin_requestFileUpload(request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                   IceInternal.Functional_GenericCallback1<TransferSequence[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_requestFileUpload(request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                   IceInternal.Functional_GenericCallback1<TransferSequence[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_requestFileUpload(request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<TransferSequence[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_requestFileUpload(request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<TransferSequence[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_requestFileUpload(request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<TransferSequence[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_requestFileUpload(request, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<bottle.transfer.dts.TransferSequence[]>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   IDataTransferServicePrxHelper.__requestFileUpload_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_requestFileUpload(FileUploadRequest request, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__requestFileUpload_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__requestFileUpload_name, __cb);
        try
        {
            __result.prepare(__requestFileUpload_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FileUploadRequest.__write(__os, request);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public TransferSequence[] end_requestFileUpload(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __requestFileUpload_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            TransferSequence[] __ret;
            __ret = FileSliceHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __requestFileUpload_completed(Ice.TwowayCallbackArg1<TransferSequence[]> __cb, Ice.AsyncResult __result)
    {
        bottle.transfer.dts.IDataTransferServicePrx __proxy = (bottle.transfer.dts.IDataTransferServicePrx)__result.getProxy();
        TransferSequence[] __ret = null;
        try
        {
            __ret = __proxy.end_requestFileUpload(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __uploadComplete_name = "uploadComplete";

    public void uploadComplete(long tag)
    {
        uploadComplete(tag, null, false);
    }

    public void uploadComplete(long tag, java.util.Map<String, String> __ctx)
    {
        uploadComplete(tag, __ctx, true);
    }

    private void uploadComplete(long tag, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_uploadComplete(begin_uploadComplete(tag, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_uploadComplete(long tag)
    {
        return begin_uploadComplete(tag, null, false, false, null);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, java.util.Map<String, String> __ctx)
    {
        return begin_uploadComplete(tag, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, Ice.Callback __cb)
    {
        return begin_uploadComplete(tag, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uploadComplete(tag, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, Callback_IDataTransferService_uploadComplete __cb)
    {
        return begin_uploadComplete(tag, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, java.util.Map<String, String> __ctx, Callback_IDataTransferService_uploadComplete __cb)
    {
        return begin_uploadComplete(tag, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uploadComplete(tag, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadComplete(tag, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uploadComplete(tag, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uploadComplete(long tag, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadComplete(tag, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_uploadComplete(long tag, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadComplete(tag, 
                                    __ctx, 
                                    __explicitCtx, 
                                    __synchronous, 
                                    new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_uploadComplete(long tag, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__uploadComplete_name, __cb);
        try
        {
            __result.prepare(__uploadComplete_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeLong(tag);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_uploadComplete(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __uploadComplete_name);
    }

    private static final String __uploadSequence_name = "uploadSequence";

    public int uploadSequence(TransferSequence ts)
    {
        return uploadSequence(ts, null, false);
    }

    public int uploadSequence(TransferSequence ts, java.util.Map<String, String> __ctx)
    {
        return uploadSequence(ts, __ctx, true);
    }

    private int uploadSequence(TransferSequence ts, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__uploadSequence_name);
        return end_uploadSequence(begin_uploadSequence(ts, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts)
    {
        return begin_uploadSequence(ts, null, false, false, null);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, java.util.Map<String, String> __ctx)
    {
        return begin_uploadSequence(ts, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, Ice.Callback __cb)
    {
        return begin_uploadSequence(ts, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uploadSequence(ts, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, Callback_IDataTransferService_uploadSequence __cb)
    {
        return begin_uploadSequence(ts, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, java.util.Map<String, String> __ctx, Callback_IDataTransferService_uploadSequence __cb)
    {
        return begin_uploadSequence(ts, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uploadSequence(ts, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadSequence(ts, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_uploadSequence(ts, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadSequence(ts, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_IntCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_uploadSequence(ts, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                IDataTransferServicePrxHelper.__uploadSequence_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_uploadSequence(TransferSequence ts, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__uploadSequence_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__uploadSequence_name, __cb);
        try
        {
            __result.prepare(__uploadSequence_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            TransferSequence.__write(__os, ts);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_uploadSequence(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __uploadSequence_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __uploadSequence_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        bottle.transfer.dts.IDataTransferServicePrx __proxy = (bottle.transfer.dts.IDataTransferServicePrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_uploadSequence(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataTransferServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataTransferServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataTransferServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IDataTransferServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IDataTransferServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IDataTransferServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, IDataTransferServicePrx.class, IDataTransferServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::dts::IDataTransferService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IDataTransferServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static IDataTransferServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            IDataTransferServicePrxHelper result = new IDataTransferServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
